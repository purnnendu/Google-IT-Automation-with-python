
Crash course on Python

Programming - A computer program is a recipe of instruction that tells your computer what to do.
Syntax - The rules for how each instruction is written.
Semantics - The effect that instruction have.
Script - A program thats short, simple and can be written quickly.

Automation - Automation is the process of replacing a manual step with one that happens automatically. Automating tasks allows you to focus on projects
that are a better use of your time, letting computers do the boring stuff for you.


PYTHON

Python interpreter - The Python interpreter is the program that reads what is in the recipe and translates it into instructions for your computer to follow.

Some of the most popular online interpreters and codepads. Give them a go to find your favourite.

  https://www.python.org/shell/
  https://www.onlinegdb.com/online_python_interpreter
  https://repl.it/languages/python3
  https://www.tutorialspoint.com/execute_python3_online.php
  https://rextester.com/l/python3_online_compiler
  https://trinket.io/python3


Additional Python resources

  Read the official Python documentation(https://docs.python.org/3/).
  Search for answers or ask a question on Stack Overflow.
  Subscribe to the Python tutor mailing list, where you can ask questions and collaborate with other Python learners(https://mail.python.org/mailman/listinfo/tutor).
  Subscribe to the Python-announce mailing list to read about the latest updates in the language(https://mail.python.org/mailman3/lists/python-announce-list.python.org/).

Functions and Keywords

Functions - Functions are pieces of code that perform a unit of work.
Keywords - Keywords are reserved words that are used to construct instructions.

In Python, text in between quotes -- either single or double quotes -- is a string data type. An integer is a whole number, without a fraction, while a
float is a real number that can contain a fractional part. When attempting to mix incompatible data types, you may encounter a TypeError. You can always
check the data type of something using the type() function.

Variables - Variables are names that we give to certain values in our programs. The process of storing a value inside a variable is called assignment.
An expression is a combination of numbers, symbols or other variables that produce a result when evaluated.

Implicit conversion - The interpreter automatically converts one data type into another(integer to float).

None - None is a very special data type in Python used to indicate that things are empty or that they return nothing.


While Loops

A while loop executes the body of the loop while the condition remains True.
Things to watch out for!
Failure to initialize variables. Make sure all the variables used in the loop’s condition  are initialized before the loop.
Unintended infinite loops. Make sure that the body of the loop modifies the variables used in the condition, so that the loop will eventually end for all
possible values of the variables.
Typical use:
While loops are mostly used when there’s an unknown number of operations to be performed, and a condition needs to be checked at each iteration.
Use while loops when you want to repeat an action until a condition changes.


For Loops

A for loop iterates over a sequence of elements, executing the body of the loop for each element in the sequence.
Common pitfalls:
Forgetting that the upper limit of a range() isn’t included.
Iterating over non-sequences. Integer numbers aren’t iterable. Strings are iterable letter by letter, but that might not be what you want.
Typical use:
For loops are mostly used when there's a pre-defined sequence or range of numbers to iterate.
Use for loops when there's a sequence of elements that you want to iterate.


Break & Continue
You can interrupt both while and for loops using the break keyword. We normally do this to interrupt a cycle due to a separate condition.
You can use the continue keyword to skip the current iteration and continue with the next one. This is typically used to jump ahead when some of the elements
of the sequence aren’t relevant.


The range() function:

range() generates a sequence of integer numbers. It can take one, two, or three parameters:
range(n): 0, 1, 2, ... n-1
range(x,y): x, x+1, x+2, ... y-1
range(p,q,r): p, p+r, p+2r, p+3r, ... q-1 (if it's a valid increment)
One parameter will create a sequence, one-by-one, from zero to one less than the parameter.
Two parameters will create a sequence, one-by-one, from the first parameter to one less than the second parameter.
Three parameters will create a sequence starting with the first parameter and stopping before the second parameter, but this time increasing each step by the
third parameter.


Recursion is the repeated application of the same procedure to a smaller problem
A recursive function must include a recursive case and base case. The recursive case calls the function again, with a different value. The base case returns a
value without calling the same function.
A recursive function will usually have this structure:

def recursive_function(parameters):
    if base_case_condition(parameters):
        return base_case_value
    recursive_function(modified_parameters)


String Reference Cheat Sheet

In Python, there are a lot of things you can do with strings. In this cheat sheet, you’ll find the most common string operations and string methods.
String operations

  len(string) Returns the length of the string
  for character in string Iterates over each character in the string
  if substring in string Checks whether the substring is part of the string
  string[i] Accesses the character at index i of the string, starting at zero
  string[i:j] Accesses the substring starting at index i, ending at index j-1. If i is omitted, it's 0 by default. If j is omitted, it's len(string) by default.

String methods

  string.lower() / string.upper() Returns a copy of the string with all lower / upper case characters
  string.lstrip() / string.rstrip() / string.strip() Returns a copy of the string without left / right / left or right whitespace
  string.count(substring) Returns the number of times substring is present in the string
  string.isnumeric() Returns True if there are only numeric characters in the string. If not, returns False.
  string.isalpha() Returns True if there are only alphabetic characters in the string. If not, returns False.
  string.split() / string.split(delimiter) Returns a list of substrings that were separated by whitespace / delimiter
  string.replace(old, new) Returns a new string where all occurrences of old have been replaced by new.
  delimiter.join(list of strings) Returns a new string with all the strings joined by the delimiter.

Using the format() method

"base string with {} placeholders".format(variables)

The format method returns a copy of the string where the {} placeholders have been replaced with the values of the variables. These variables are converted
to strings if they weren't strings already. Empty placeholders are replaced by the variables passed to format in the same order.

"{0} {1}".format(first, second)

If the placeholders indicate a number, they’re replaced by the variable corresponding to that order (starting at zero).

"{var1} {var2}".format(var1=value1, var2=value2)

If the placeholders indicate a field name, they’re replaced by the variable corresponding to that field name. This means that parameters to format need
to be passed indicating the field name.

"{:exp1} {:exp2}".format(value1, value2)

If the placeholders include a colon, what comes after the colon is a formatting expression. See below for the expression reference.

Formatting expressions
Expr	Meaning	Example
{:d}	integer value	'{:d}'.format(10.5) → '10'
{:.2f}	floating point with that many decimals	'{:.2f}'.format(0.5) → '0.50'
{:.2s}	string with that many characters	'{:.2s}'.format('Python') → 'Py'
{:<6s}	string aligned to the left that many spaces	'{:<6s}'.format('Py') → 'Py    '
{:>6s}	string aligned to the right that many spaces	'{:<6s}'.format('Py') → '    Py'
{:^6s}	string centered in that many spaces	'{:<6s}'.format('Py') → '  Py '


Lists and Tuples Operations Cheat Sheet

Lists and tuples are both sequences, so they share a number of sequence operations. But, because lists are mutable, there are also a number of methods specific
just to lists. This cheat sheet gives you a run down of the common operations first, and the list-specific operations second.
Common sequence operations

  len(sequence) Returns the length of the sequence
  for element in sequence Iterates over each element in the sequence
  if element in sequence Checks whether the element is part of the sequence
  sequence[i] Accesses the element at index i of the sequence, starting at zero
  sequence[i:j] Accesses a slice starting at index i, ending at index j-1. If i is omitted, it's 0 by default. If j is omitted, it's len(sequence) by default.
  for index, element in enumerate(sequence) Iterates over both the indexes and the elements in the sequence at the same time

List-specific operations and methods

  list[i] = x Replaces the element at index i with x
  list.append(x) Inserts x at the end of the list
  list.insert(i, x) Inserts x at index i
  list.pop(i) Returns the element a index i, also removing it from the list. If i is omitted, the last element is returned and removed.
  list.remove(x) Removes the first occurrence of x in the list
  list.sort() Sorts the items in the list
  list.reverse() Reverses the order of items of the list
  list.clear() Removes all the items of the list
  list.copy() Creates a copy of the list
  list.extend(other_list) Appends all the elements of other_list at the end of list

List comprehension

  [expression for variable in sequence] Creates a new list based on the given sequence. Each element is the result of the given expression.
  [expression for variable in sequence if condition] Creates a new list based on the given sequence. Each element is the result of the given expression; elements
  only get added if the condition is true.


Dictionary Methods Cheat Sheet

Definition
x = {key1:value1, key2:value2}

Operations

  len(dictionary) - Returns the number of items in the dictionary
  for key in dictionary - Iterates over each key in the dictionary
  for key, value in dictionary.items() - Iterates over each key,value pair in the dictionary
  if key in dictionary - Checks whether the key is in the dictionary
  dictionary[key] - Accesses the item with key key of the dictionary
  dictionary[key] = value - Sets the value associated with key
  del dictionary[key] - Removes the item with key key from the dictionary

Methods

  dict.get(key, default) - Returns the element corresponding to key, or default if it's not present
  dict.keys() - Returns a sequence containing the keys in the dictionary
  dict.values() - Returns a sequence containing the values in the dictionary
  dict.update(other_dictionary) - Updates the dictionary with the items coming from the other dictionary. Existing entries will be replaced; new entries
  will be added.
  dict.clear() - Removes all the items of the dictionary


Classes and Methods Cheat Sheet

In the past few videos, we’ve seen how to define classes and methods in Python. Here, you’ll find a run-down of everything we’ve covered, so you can refer
to it whenever you need a refresher.

Defining classes and methods
class ClassName:
    def method_name(self, other_parameters):
        body_of_method

Classes and Instances

  Classes define the behavior of all instances of a specific class.
  Each variable of a specific class is an instance or object.
  Objects can have attributes, which store information about the object.
  You can make objects do work by calling their methods.
  The first parameter of the methods (self) represents the current instance.
  Methods are just like functions, but they can only be used through a class.

Special methods

  Special methods start and end with __.
  Special methods have specific names, like __init__ for the constructor or __str__ for the conversion to string.

Documenting classes, methods and functions

  You can add documentation to classes, methods, and functions by using docstrings right after the definition. Like this:
  class ClassName:
    """Documentation for the class."""
    def method_name(self, other_parameters):
        """Documentation for the method."""
        body_of_method

    def function_name(parameters):
        """Documentation for the function."""
        body_of_function

always initialize mutable attributes in the constructor
https://pypi.org/
